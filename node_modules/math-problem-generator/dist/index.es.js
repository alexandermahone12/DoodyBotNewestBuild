function add() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.reduce(function (sum, x) {
    return sum + x;
  }, 0);
}
function sub() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  if (args.length === 0) {
    return 0;
  }
  if (args.length === 1) {
    return 0 - args[0];
  }
  return args.reduce(function (diff, x) {
    return diff - x;
  }, args[0] * 2);
}
function mul() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return args.reduce(function (product, x) {
    return product * x;
  }, 1);
}
function div() {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return args.reduce(function (q, x) {
    return q / x;
  }, 1);
}

var common = /*#__PURE__*/Object.freeze({
  add: add,
  sub: sub,
  mul: mul,
  div: div
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var functions = _extends({}, common);

var operators = {
  '+': functions.add,
  '-': functions.sub,
  'x': functions.mul,
  '*': functions.mul,
  '/': functions.div
};

var MathProblems = {};

MathProblems.version = '1.0.0';
MathProblems.functions = functions;
MathProblems.operators = operators;

export default MathProblems;
//# sourceMappingURL=index.es.js.map
